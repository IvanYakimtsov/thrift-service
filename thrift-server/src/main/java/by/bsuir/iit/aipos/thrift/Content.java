/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package by.bsuir.iit.aipos.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-03-16")
public class Content implements org.apache.thrift.TBase<Content, Content._Fields>, java.io.Serializable, Cloneable, Comparable<Content> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Content");

  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMAGE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("imageFormat", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ContentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ContentTupleSchemeFactory();

  public String body; // required
  public java.nio.ByteBuffer image; // required
  public String imageFormat; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BODY((short)1, "body"),
    IMAGE((short)2, "image"),
    IMAGE_FORMAT((short)3, "imageFormat");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BODY
          return BODY;
        case 2: // IMAGE
          return IMAGE;
        case 3: // IMAGE_FORMAT
          return IMAGE_FORMAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.IMAGE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("imageFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Content.class, metaDataMap);
  }

  public Content() {
  }

  public Content(
    String body,
    java.nio.ByteBuffer image,
    String imageFormat)
  {
    this();
    this.body = body;
    this.image = org.apache.thrift.TBaseHelper.copyBinary(image);
    this.imageFormat = imageFormat;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Content(Content other) {
    if (other.isSetBody()) {
      this.body = other.body;
    }
    if (other.isSetImage()) {
      this.image = org.apache.thrift.TBaseHelper.copyBinary(other.image);
    }
    if (other.isSetImageFormat()) {
      this.imageFormat = other.imageFormat;
    }
  }

  public Content deepCopy() {
    return new Content(this);
  }

  @Override
  public void clear() {
    this.body = null;
    this.image = null;
    this.imageFormat = null;
  }

  public String getBody() {
    return this.body;
  }

  public Content setBody(String body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public byte[] getImage() {
    setImage(org.apache.thrift.TBaseHelper.rightSize(image));
    return image == null ? null : image.array();
  }

  public java.nio.ByteBuffer bufferForImage() {
    return org.apache.thrift.TBaseHelper.copyBinary(image);
  }

  public Content setImage(byte[] image) {
    this.image = image == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(image.clone());
    return this;
  }

  public Content setImage(java.nio.ByteBuffer image) {
    this.image = org.apache.thrift.TBaseHelper.copyBinary(image);
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public String getImageFormat() {
    return this.imageFormat;
  }

  public Content setImageFormat(String imageFormat) {
    this.imageFormat = imageFormat;
    return this;
  }

  public void unsetImageFormat() {
    this.imageFormat = null;
  }

  /** Returns true if field imageFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetImageFormat() {
    return this.imageFormat != null;
  }

  public void setImageFormatIsSet(boolean value) {
    if (!value) {
      this.imageFormat = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        if (value instanceof byte[]) {
          setImage((byte[])value);
        } else {
          setImage((java.nio.ByteBuffer)value);
        }
      }
      break;

    case IMAGE_FORMAT:
      if (value == null) {
        unsetImageFormat();
      } else {
        setImageFormat((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BODY:
      return getBody();

    case IMAGE:
      return getImage();

    case IMAGE_FORMAT:
      return getImageFormat();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BODY:
      return isSetBody();
    case IMAGE:
      return isSetImage();
    case IMAGE_FORMAT:
      return isSetImageFormat();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Content)
      return this.equals((Content)that);
    return false;
  }

  public boolean equals(Content that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_imageFormat = true && this.isSetImageFormat();
    boolean that_present_imageFormat = true && that.isSetImageFormat();
    if (this_present_imageFormat || that_present_imageFormat) {
      if (!(this_present_imageFormat && that_present_imageFormat))
        return false;
      if (!this.imageFormat.equals(that.imageFormat))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBody()) ? 131071 : 524287);
    if (isSetBody())
      hashCode = hashCode * 8191 + body.hashCode();

    hashCode = hashCode * 8191 + ((isSetImage()) ? 131071 : 524287);
    if (isSetImage())
      hashCode = hashCode * 8191 + image.hashCode();

    hashCode = hashCode * 8191 + ((isSetImageFormat()) ? 131071 : 524287);
    if (isSetImageFormat())
      hashCode = hashCode * 8191 + imageFormat.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Content other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageFormat()).compareTo(other.isSetImageFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageFormat, other.imageFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Content(");
    boolean first = true;

    sb.append("body:");
    if (this.body == null) {
      sb.append("null");
    } else {
      sb.append(this.body);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image:");
    if (this.image == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.image, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageFormat:");
    if (this.imageFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.imageFormat);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContentStandardScheme getScheme() {
      return new ContentStandardScheme();
    }
  }

  private static class ContentStandardScheme extends org.apache.thrift.scheme.StandardScheme<Content> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Content struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image = iprot.readBinary();
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMAGE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageFormat = iprot.readString();
              struct.setImageFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Content struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(struct.body);
        oprot.writeFieldEnd();
      }
      if (struct.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        oprot.writeBinary(struct.image);
        oprot.writeFieldEnd();
      }
      if (struct.imageFormat != null) {
        oprot.writeFieldBegin(IMAGE_FORMAT_FIELD_DESC);
        oprot.writeString(struct.imageFormat);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContentTupleScheme getScheme() {
      return new ContentTupleScheme();
    }
  }

  private static class ContentTupleScheme extends org.apache.thrift.scheme.TupleScheme<Content> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Content struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBody()) {
        optionals.set(0);
      }
      if (struct.isSetImage()) {
        optionals.set(1);
      }
      if (struct.isSetImageFormat()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBody()) {
        oprot.writeString(struct.body);
      }
      if (struct.isSetImage()) {
        oprot.writeBinary(struct.image);
      }
      if (struct.isSetImageFormat()) {
        oprot.writeString(struct.imageFormat);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Content struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.body = iprot.readString();
        struct.setBodyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.image = iprot.readBinary();
        struct.setImageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.imageFormat = iprot.readString();
        struct.setImageFormatIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

